name: De‑Risk Radar

on:
  schedule:
    - cron:  '0 12 * * *'   # 07 AM CT
    - cron:  '0 0  * * *'   # 07 PM CT
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - run: pip install pandas requests jinja2 tenacity

      - name: Run report script
        run: |
          python - <<'PY'
          import requests, pandas as pd, datetime as dt, textwrap, time, math, json
          from tenacity import retry, stop_after_attempt, wait_fixed

          # ------------- Helpers -------------
          @retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
          def cg(url, **params):
              r = requests.get(url, params=params, timeout=15)
              r.raise_for_status()
              return r.json()

          # ------------- 1. Prices & Market Cap -------------
          btc_price = cg("https://api.coingecko.com/api/v3/simple/price",
                         ids="bitcoin", vs_currencies="usd")["bitcoin"]["usd"]

          mcap_resp = cg("https://api.coingecko.com/api/v3/global")
          mcap = mcap_resp["data"]["total_market_cap"]["usd"]

          # ------------- 2. Funding & OI (handle errors) -------------
          bin_base = "https://fapi.binance.com/fapi/v1"

          try:
              fund_json = requests.get(f"{bin_base}/fundingRate",
                                       params={"symbol": "BTCUSDT", "limit": 1},
                                       timeout=10).json()
              lastFunding = float(fund_json[-1]["fundingRate"]) * 100
          except Exception:
              lastFunding = 0.0

          try:
              oi_json = requests.get(f"{bin_base}/openInterestHist",
